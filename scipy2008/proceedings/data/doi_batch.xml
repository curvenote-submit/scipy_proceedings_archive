<doi_batch xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="5.3.1" xmlns="http://www.crossref.org/schema/5.3.1" xmlns:jats="http://www.ncbi.nlm.nih.gov/JATS1" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fr="http://www.crossref.org/fundref.xsd" xmlns:ai="http://www.crossref.org/AccessIndicators.xsd" xsi:schemaLocation="http://www.crossref.org/schema/5.3.1 http://www.crossref.org/schemas/crossref5.3.1.xsd"><head><doi_batch_id>53c1544b-eb82-4219-abaa-ac3c651ebabe</doi_batch_id><timestamp>1724837825145</timestamp><depositor><depositor_name>Curvenote</depositor_name><email_address>doi@curvenote.com</email_address></depositor><registrant>Crossref</registrant></head><body><conference><contributors><person_name sequence="first" contributor_role="editor"><given_name>Gael</given_name><surname>Varoquaux</surname><affiliations><institution><institution_name>Neurospin, CEA Saclay, Bât 145, 91191 Gif-sur-Yvette France</institution_name></institution></affiliations><alt-name><string-name>Gael Varoquaux</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="editor"><given_name>Travis</given_name><surname>Vaught</surname><affiliations><institution><institution_name>Enthought, Austin TX USA</institution_name></institution></affiliations><alt-name><string-name>Travis Vaught</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="editor"><given_name>Jarrod</given_name><surname>Millman</surname><affiliations><institution><institution_name>University of California Berkeley, Berkeley CA USA</institution_name></institution></affiliations><alt-name><string-name>Jarrod Millman</string-name></alt-name></person_name></contributors><event_metadata><conference_name>Python in Science Conference</conference_name><conference_acronym>SciPy</conference_acronym><conference_number>7th</conference_number><conference_location>Pasadena, California</conference_location><conference_date>August 19 - August 24, 2008</conference_date></event_metadata><proceedings_series_metadata><series_metadata><titles><title>Proceedings of the Python in Science Conference</title><original_language_title>Proceedings of the Python in Science Conference</original_language_title></titles><issn>2575-9752</issn><doi_data><doi>10.25080/issn.2575-9752</doi><resource>https://doi.curvenote.com/10.25080/issn.2575-9752</resource></doi_data></series_metadata><proceedings_title>Proceedings of the 7th Python in Science Conference</proceedings_title><proceedings_subject>Scientific Computing with Python</proceedings_subject><publisher><publisher_name>SciPy</publisher_name></publisher><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><noisbn reason="simple_series"></noisbn><doi_data><doi>10.25080/PFVC8793</doi><resource>https://doi.curvenote.com/10.25080/PFVC8793</resource></doi_data></proceedings_series_metadata><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Gael</given_name><surname>Varoquaux</surname><affiliations><institution><institution_name>Neurospin, CEA Saclay, Bât 145, 91191 Gif-sur-Yvette France</institution_name></institution></affiliations><alt-name><string-name>Gael Varoquaux</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Travis</given_name><surname>Vaught</surname><affiliations><institution><institution_name>Enthought, Austin TX USA</institution_name></institution></affiliations><alt-name><string-name>Travis Vaught</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Jarrod</given_name><surname>Millman</surname><affiliations><institution><institution_name>University of California Berkeley, Berkeley CA USA</institution_name></institution></affiliations><alt-name><string-name>Jarrod Millman</string-name></alt-name></person_name></contributors><titles><title>Editorial</title></titles><jats:abstract><jats:p>This year marked the 7th edition of the conference; however, it is the first edition for which proceedings are to be published. We are thrilled by this new development. These proceedings are the sign of a maturing community not only of developers, but also of scientific users. Python’s use as a tool for producing scientific results is, by now, well established. Its status as the subject of research and academic publication is now being recognized and we hope that the proceedings of the SciPy Conference will help communicate how scientists and engineers are using and building upon various Python tools to solve their problems.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>3</first_page><last_page>4</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/HXDH2061</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/HXDH2061</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Jarrod</given_name><surname>Millman</surname><affiliations><institution><institution_name>University of California Berkeley, Berkeley, CA USA</institution_name></institution></affiliations><alt-name><string-name>Jarrod Millman</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Travis</given_name><surname>Vaught</surname><affiliations><institution><institution_name>Enthought, Austin, TX USA</institution_name></institution></affiliations><alt-name><string-name>Travis Vaught</string-name></alt-name></person_name></contributors><titles><title>The State of SciPy</title></titles><jats:abstract><jats:p>The annual SciPy conference provides a unique opportunity to reflect on the state of scientific programming in Python.  In this paper, we will look back on where we have been, discuss where we are, and ask where we are going as a community.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>5</first_page><last_page>10</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/HNCD8803</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/HNCD8803</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Aric A.</given_name><surname>Hagberg</surname><affiliations><institution><institution_name>Los Alamos National Laboratory, Los Alamos, New Mexico USA</institution_name></institution></affiliations><alt-name><string-name>Aric A. Hagberg</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Daniel A.</given_name><surname>Schult</surname><affiliations><institution><institution_name>Colgate University, Hamilton, NY USA</institution_name></institution></affiliations><alt-name><string-name>Daniel A. Schult</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Pieter J.</given_name><surname>Swart</surname><affiliations><institution><institution_name>Los Alamos National Laboratory, Los Alamos, New Mexico USA</institution_name></institution></affiliations><alt-name><string-name>Pieter J. Swart</string-name></alt-name></person_name></contributors><titles><title>Exploring Network Structure, Dynamics, and Function using NetworkX</title></titles><jats:abstract><jats:p>NetworkX is a Python language package for exploration and analysis of networks and network algorithms. The core package provides data structures for representing many types of networks, or graphs, including simple graphs, directed graphs, and graphs with parallel edges and self-loops. The nodes in NetworkX graphs can be any (hashable) Python object and edges can contain arbitrary data; this flexibility makes NetworkX ideal for representing networks found in many different scientific fields. In addition to the basic data structures many graph algorithms are implemented for calculating network properties and structure measures: shortest paths, betweenness centrality, clustering, and degree distribution and many more. NetworkX can read and write various graph formats for easy exchange with existing data, and provides generators for many classic graphs and popular graph models, such as the Erdos-Renyi, Small World, and Barabasi-Albert models. The ease-of-use and flexibility of the Python programming language together with connection to the SciPy tools make NetworkX a powerful tool for scientific computations. We discuss some of our recent work studying synchronization of coupled oscillators to demonstrate how NetworkX enables research in the field of computational networks.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>11</first_page><last_page>15</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/TCWV9851</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/TCWV9851</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Stefano</given_name><surname>Taschini</surname><affiliations><institution><institution_name>Altis Investment Management AG, Poststrasse 18, 6300 Zug Switzerland</institution_name></institution></affiliations><alt-name><string-name>Stefano Taschini</string-name></alt-name></person_name></contributors><titles><title>Interval Arithmetic: Python Implementation and Applications</title></titles><jats:abstract><jats:p>This paper presents the Python implementation of an interval system in the extended real set that is closed under arithmetic operations. This system consists of the lattice generated by union and intersection of closed intervals, with operations defined by image closure of their real set counterparts. The effects of floating-point rounding are accounted for in the implementation. Two applications will be discussed: (1) estimating the precision of numerical computations, and (2) solving non-linear equations (possibly with multiple solutions) using an interval Newton-Raphson algorithm.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>16</first_page><last_page>21</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/XJFF2622</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/XJFF2622</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Damian</given_name><surname>Eads</surname><affiliations><institution><institution_name>Los Alamos National Laboratory, MS D436, Los Alamos, NM USA</institution_name></institution></affiliations><alt-name><string-name>Damian Eads</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Edward</given_name><surname>Rosten</surname><affiliations><institution><institution_name>Los Alamos National Laboratory, MS D436, Los Alamos, NM USA</institution_name></institution></affiliations><alt-name><string-name>Edward Rosten</string-name></alt-name></person_name></contributors><titles><title>Experiences Using SciPy for Computer Vision Research</title></titles><jats:abstract><jats:p>SciPy is an effective tool suite for prototyping new algorithms. We share some of our experiences using it for the first time to support our research in object detection. SciPy makes it easy to integrate C code, which is essential when algorithms operating on large data sets cannot be vectorized. The universality of Python, the language in which SciPy was written, gives the researcher access to a broader set of non-numerical libraries to support GUI development, interface with databases, manipulate graph structures, render 3D graphics, unpack binary files, etc. Python’s extensive support for operator overloading makes SciPy’s syntax as succinct as its competitors, MATLAB, Octave, and R. More profoundly, we found it easy to rework research code written with SciPy into a production application, deployable on numerous platforms.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>22</first_page><last_page>26</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/GVTA4131</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/GVTA4131</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Stefan Johann Van</given_name><surname>Walt</surname><affiliations><institution><institution_name>University of Stellenbosch, South Africa</institution_name></institution></affiliations><alt-name><string-name>Stefan Johann Van der Walt</string-name></alt-name></person_name></contributors><titles><title>The SciPy Documentation Project (Technical Overview)</title></titles><jats:abstract><jats:p>This summer saw the first NumPy Documentation Marathon, during  which many thousands of lines of documentation  were written. In addition, a web framework was developed which allows the community to contribute  docstrings in a wiki-like fashion, without needing access to the source repository. The new reference  guide, which is based on these contributions, was  built using the popular Sphinx tool. While the documentation coverage is now better than ever, there  is still a lot of work to be done, and we encourage  interested parties to register and contribute further. This paper gives a more detailed overview of the events leading to this project, and of the technical goals achieved.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>27</first_page><last_page>28</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/PHXV5628</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/PHXV5628</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Michael</given_name><surname>Droettboom</surname><affiliations><institution><institution_name>Space Telescope Science Institute, USA</institution_name></institution></affiliations><alt-name><string-name>Michael Droettboom</string-name></alt-name></person_name></contributors><titles><title>Matplotlib Solves the Riddle of the Sphinx</title></titles><jats:abstract><jats:p>This paper shares our experience converting matplotlib’s documentation to use Sphinx and will hopefully encourage other projects to do so. Matplotlib’s documentation serves as a good test case, because it includes both narrative text and API docstrings, and makes use of automatically plotted figures and mathematical expressions.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>29</first_page><last_page>32</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/CTJE0023</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/CTJE0023</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Joseph</given_name><surname>Harrington</surname><affiliations><institution><institution_name>University of Central Florida, USA</institution_name></institution></affiliations><alt-name><string-name>Joseph Harrington</string-name></alt-name></person_name></contributors><titles><title>The SciPy Documentation Project</title></titles><jats:abstract><jats:p>The SciPy Documentation Project seeks to provide NumPy and SciPy with professional documentation and documentation access tools in a variety of formats. As our first effort, we have sponsored the SciPy Documentation Marathon 2008, whose goal is to produce reference documentation for the most-used portions of NumPy. I present an overview of current efforts and future plans.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>33</first_page><last_page>35</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/MJHW7647</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/MJHW7647</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Victoria G.</given_name><surname>Laidler</surname><affiliations><institution><institution_name>Computer Sciences Corporation, Space Telescope Science Institute, 3700 San Martin Drive, Baltimore, MD 21218 USA</institution_name></institution></affiliations><alt-name><string-name>Victoria G. Laidler</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Perry</given_name><surname>Greenfield</surname><affiliations><institution><institution_name>Space Telescope Science Institute, 3700 San Martin Drive, Baltimore, MD 21218 USA</institution_name></institution></affiliations><alt-name><string-name>Perry Greenfield</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Ivo</given_name><surname>Busko</surname><affiliations><institution><institution_name>Space Telescope Science Institute, 3700 San Martin Drive, Baltimore, MD 21218 USA</institution_name></institution></affiliations><alt-name><string-name>Ivo Busko</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Robert</given_name><surname>Jedrzejewski</surname><affiliations><institution><institution_name>Space Telescope Science Institute, 3700 San Martin Drive, Baltimore, MD 21218 USA</institution_name></institution></affiliations><alt-name><string-name>Robert Jedrzejewski</string-name></alt-name></person_name></contributors><titles><title>Pysynphot: A Python Re-Implementation of a Legacy App in Astronomy</title></titles><jats:abstract><jats:p>Pysynphot is a package that allows astronomers to model, combine, and manipulate the spectra of stars or galaxies in simulated observations. It is being developed to replace a widely used legacy application, SYNPHOT. While retaining the data-driven philosophy of the original application, Pysynphot’s architecture and improved algorithms were developed to address some of its known weaknesses. The language features available in Python and its libraries, including numpy, often enabled clean solutions to what were messy problems in the original application, and the interactive graphics capabilities of matplotlib/pylab, used with a consistent set of exposed object attributes, eliminated the need to write special-purpose plotting methods. This paper will discuss these points in some detail, as well as providing an overview of the problem domain and the object model.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>36</first_page><last_page>38</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/FCPW4186</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/FCPW4186</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Robert</given_name><surname>Lupton</surname><affiliations><institution><institution_name>Princeton University, USA</institution_name></institution></affiliations><alt-name><string-name>Robert Lupton</string-name></alt-name></person_name></contributors><titles><title>How the Large Synoptic Survey Telescope (LSST) is using Python</title></titles><jats:abstract><jats:p>The Large Synoptic Survey Telescope (LSST) is a project to build an 8.4m telescope at Cerro Pachon, Chile and survey the entire sky every three days starting around 2014. The scientific goals of the project range from characterizing the population of largish asteroids which are in orbits that could hit the Earth to understanding the nature of the dark energy that is causing the Universe’s expansion to accelerate. The application codes, which handle the images coming from the telescope and generate catalogs of astronomical sources, are being implemented in C++, exported to python using swig. The pipeline processing framework allows these python modules to be connected together to process data in a parallel environment.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>39</first_page><last_page>41</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/XKAE7942</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/XKAE7942</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Dan</given_name><surname>Starr</surname><affiliations><institution><institution_name>UC Berkeley, USA</institution_name></institution></affiliations><alt-name><string-name>Dan Starr</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Josh</given_name><surname>Bloom</surname><affiliations><institution><institution_name>UC Berkeley, USA</institution_name></institution></affiliations><alt-name><string-name>Josh Bloom</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>John</given_name><surname>Brewer</surname><affiliations><institution><institution_name>UC Berkeley, USA</institution_name></institution></affiliations><alt-name><string-name>John Brewer</string-name></alt-name></person_name></contributors><titles><title>Realtime Astronomical Time-series Classification and Broadcast Pipeline</title></titles><jats:abstract><jats:p>The Transients Classification Pipeline (TCP) is a Berkeley-led, Python based project which federates data streams from multiple surveys and observatories, classifies with machine learning and astronomer defined science priors, and broadcasts sources of interest to various science clients. This multi-node pipeline uses Python wrapped classification algorithms, some of which will be generated by training machine learning software using astronomer classified time-series data. Dozens of context and time-series based features are generated in real time for astronomical sources using a variety of Python packages and remote services.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>42</first_page><last_page>45</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/YWCT3772</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/YWCT3772</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Matthew</given_name><surname>Turk</surname><affiliations><institution><institution_name>KIPAC / SLAC / Stanford, USA</institution_name></institution></affiliations><alt-name><string-name>Matthew Turk</string-name></alt-name></person_name></contributors><titles><title>Analysis and Visualization of Multi-Scale Astrophysical Simulations Using Python and NumPy</title></titles><jats:abstract><jats:p>The study the origins of cosmic structure requires large-scale computer simulations beginning with well-constrained, observationally-determined, initial conditions. We use Adaptive Mesh Refinement to conduct multi-resolution simulations spanning twelve orders of magnitude in spatial dimensions and over twenty orders of magnitude in density. These simulations must be analyzed and visualized in a manner that is fast, accurate, and reproducible. I present “yt,” a cross-platform analysis toolkit written in Python. “yt” consists of a data-management layer for transporting and tracking simulation outputs, a plotting layer, a parallel analysis layer for handling mesh-based and particle-based data, as well as several interfaces. I demonstrate how the origins of cosmic structure -- from the scale of clusters of galaxies down to the formation of individual stars -- can be analyzed and visualized using a NumPy-based toolkit. Additionally, I discuss efforts to port this analysis code to other adaptive mesh refinement data formats, enabling direct comparison of data between research groups using different methods to simulate the same objects.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>46</first_page><last_page>50</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/GCTE1526</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/GCTE1526</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Prabhu</given_name><surname>Ramachandran</surname><affiliations><institution><institution_name>Indian Institute of Technology Bombay, Powai, Mumbai 400076 India</institution_name></institution></affiliations><alt-name><string-name>Prabhu Ramachandran</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Gaël</given_name><surname>Varoquaux</surname><affiliations><institution><institution_name>NeuroSpin, CEA Saclay, Bât 145, 91191 Gif-sur-Yvette France</institution_name></institution></affiliations><alt-name><string-name>Gaël Varoquaux</string-name></alt-name></person_name></contributors><titles><title>Mayavi: Making 3D Data Visualization Reusable</title></titles><jats:abstract><jats:p>Mayavi is a general-purpose 3D scientific visualization package.  We believe 3D data visualization is a difficult task and different users can benefit from an easy-to-use tool for this purpose. In this article, we focus on how Mayavi addresses the needs of different users with a common code-base, rather than describing the data visualization functionalities of Mayavi, or the visualization model exposed to the user.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>51</first_page><last_page>56</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/XCPY1744</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/XCPY1744</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Ryan</given_name><surname>Krauss</surname><affiliations><institution><institution_name>Southern Illinois University Edwardsville, USA</institution_name></institution></affiliations><alt-name><string-name>Ryan Krauss</string-name></alt-name></person_name></contributors><titles><title>Finite Element Modeling of Contact and Impact Problems Using Python</title></titles><jats:abstract><jats:p>This paper discusses an on going project to improve the accuracy of automotive crash simulations. Two likely causes for discrepancy between simulations and the results of real, physical tests are discussed. An existing Python package for finite element analysis, SfePy, is presented along with plans to contribute additional features in support of this work, including nonlinear material modeling and contact between two bodies.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>57</first_page><last_page>61</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/GKXP5132</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/GKXP5132</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Viral B.</given_name><surname>Shah</surname><affiliations><institution><institution_name>Interactive Supercomputing, Waltham, MA. USA</institution_name></institution></affiliations><alt-name><string-name>Viral B. Shah</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Brad</given_name><surname>McRae</surname><affiliations><institution><institution_name>The Nature Conservancy, Seattle, WA. USA</institution_name></institution></affiliations><alt-name><string-name>Brad McRae</string-name></alt-name></person_name></contributors><titles><title>Circuitscape: A Tool for Landscape Ecology</title></titles><jats:abstract><jats:p>The modeling of ecological connectivity across networks and landscapes is an active research area that spans the disciplines of ecology, conservation, and population genetics. Recently, concepts and algorithms from electrical circuit theory have been adapted to address these problems. The approach is based on linkages between circuit and random walk theories, and has several advantages over previous analytic approaches, including incorporation of multiple dispersal pathways into analyses. Here we describe Circuitscape, a computational tool developed for modeling landscape connectivity using circuit theory. Our Python implementation can quickly solve networks with millions of nodes, or landscapes with millions of raster cells.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>62</first_page><last_page>65</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/EWDJ4033</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/EWDJ4033</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Karl</given_name><surname>Young</surname><affiliations><institution><institution_name>University of California, San Francisco, USA</institution_name></institution></affiliations><alt-name><string-name>Karl Young</string-name></alt-name></person_name></contributors><titles><title>Summarizing Complexity in High Dimensional Spaces</title></titles><jats:abstract><jats:p>As the need to analyze high dimensional, multi-spectral data on complex physical systems becomes more common, the value of methods that glean useful summary information from the data increases. This paper describes a method that uses information theoretic based complexity estimation measures to provide diagnostic summary information from medical images. Implementation of the method would have been difficult if not impossible for a non expert programmer without access to the powerful array processing capabilities provided by SciPy.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>66</first_page><last_page>69</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/XYFC8951</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/XYFC8951</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Ilan</given_name><surname>Schnell</surname><affiliations><institution><institution_name>Enthought, USA</institution_name></institution></affiliations><alt-name><string-name>Ilan Schnell</string-name></alt-name></person_name></contributors><titles><title>Converting Python Functions to Dynamically Compiled C</title></titles><jats:abstract><jats:p>Applications written in Python often suffer from the lack of speed, compared to C and other languages which can be compiled to native machine code. In this paper we discuss ways to write functions in pure Python and still benefit from the speed provided by C code compiled to machine code. The focus is to make it as easy as possible for the programmer to write these functions.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>70</first_page><last_page>72</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/TDNX3626</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/TDNX3626</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Rahul</given_name><surname>Garg</surname><affiliations><institution><institution_name>University of Alberta, Canada</institution_name></institution></affiliations><alt-name><string-name>Rahul Garg</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Jose Nelson</given_name><surname>Amaral</surname><affiliations><institution><institution_name>University of Alberta, Canada</institution_name></institution></affiliations><alt-name><string-name>Jose Nelson Amaral</string-name></alt-name></person_name></contributors><titles><title>unPython: Converting Python Numerical Programs into C</title></titles><jats:abstract><jats:p>unPython is a Python-to-C compiler intended for numerical Python programs. The compiler takes as input type-annotated Python source and produces C source code for an equivalent extension module. The compiler is NumPy-aware and can convert most NumPy indexing or slicing operations into C array accesses. Furthermore the compiler also allows annotating certain for-loops as parallel and can generate OpenMP code thus providing an easy way to take advantage of multicore architectures.</jats:p></jats:abstract><publication_date media_type="online"><month>06</month><day>28</day><year>2008</year></publication_date><pages><first_page>73</first_page><last_page>76</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/XGYX8633</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/XGYX8633</resource></doi_data></conference_paper></conference></body></doi_batch>