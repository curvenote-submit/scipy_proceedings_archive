@Book{hume48,
  author =  "David Hume",
  year =    "1748",
  title =   "An enquiry concerning human understanding",
  address =     "Indianapolis, IN",
  publisher =   "Hackett",
  doi = "10.1017/CBO9780511808432",
}

@inproceedings{edif_based,
author = {Li, W. and Switzer, H.},
title = {A Unified Data Exchnage Environment Based on EDIF},
year = {1989},
isbn = {0897913108},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
opturl = {https://doi.org/10.1145/74382.74534},
doi = {10.1145/74382.74534},
booktitle = {Proceedings of the 26th ACM/IEEE Design Automation Conference},
pages = {803–806},
numpages = {4},
location = {Las Vegas, Nevada, USA},
series = {DAC ’89}
}
  


@InProceedings{networkx,
  author =       {Aric A. Hagberg and Daniel A. Schult and Pieter J. Swart},
  title =        {Exploring Network Structure, Dynamics, and Function using NetworkX},
  booktitle =   {Proceedings of the 7th Python in Science Conference},
  pages =     {11 - 15},
  address = {Pasadena, CA USA},
  year =      {2008},
  editor =    {Ga\"el Varoquaux and Travis Vaught and Jarrod Millman},
}

@INPROCEEDINGS{verilog_netlist,
  author={ {Jen-Jen Lung} and J. {Bhasker}},
  booktitle={International Verilog HDL Conference}, 
  title={Verilog netlist as an exchange language}, 
  year={1994},
  volume={},
  number={},
  pages={10-14},
  abstract={Recently, difficulties in exchanging a Verilog HDL netlist between two different vendor tools have been observed. Many are trying to overcome some of the difficult issues by using an ad hoc approach. Most of the time a designer has to hand edit or write scripts or even hire an outside consultant to resolve these issues. Some of these approaches, however, may be time consuming, and this can lead to a loss of designers' productivity. The authors present some of the problems that they noticed, and suggest possible solutions. They present these in the context of translating a Verilog HDL netlist to AT&T's internal design database, called DDB, and vice versa. A subset of the Verilog language that is extracted to do the netlist translation is also presented.<>},
  keywords={specification languages;software portability;exchange language;Verilog HDL;netlist;vendor tools;internal design database;DDB;netlist translation;Hardware design languages;Databases;Data models;Lungs;Productivity;Wire;Law;Legal factors;Displays},
  doi={10.1109/IVC.1994.323754},
  ISSN={},
  month={March},}
  
  
@InProceedings{pyeda,
  author    = { {C}hris {D}rake },
  title     = { {P}y{E}{D}{A}: {D}ata {S}tructures and {A}lgorithms for {E}lectronic {D}esign {A}utomation },
  booktitle = { {P}roceedings of the 14th {P}ython in {S}cience {C}onference },
  pages     = { 25 - 30 },
  year      = { 2015 },
  editor    = { {K}athryn {H}uff and {J}ames {B}ergstra },
  doi       = { 10.25080/Majora-7b98e3ed-004 }
}

@article{pratt_2008,
author = {Pratt, Brian and Caffrey, Michael and Carroll, James F and Graham, Paul and Morgan, Keith and Wirthlin, Michael},
doi = {10.1109/TNS.2008.2000852},
file = {:C$\backslash$:/Users/akeller9/library/mendeley//Pratt et al. - 2008 - Fine-Grain SEU Mitigation for FPGAs Using Partial TMR.pdf:pdf},
issn = {0018-9499},
journal = {IEEE Transactions on Nuclear Science},
keywords = {circuit CAD,field programmable gate arrays,integra},
mendeley-groups = {pTMR},
month = {aug},
number = {4},
pages = {2274--2280},
title = {Fine-Grain {SEU} Mitigation for {FPGAs} Using Partial {TMR}},
opturl = {http://ieeexplore.ieee.org/document/4636895/},
volume = {55},
year = {2008}
}

@inproceedings{Johnson:2010,
address = {New York, NY, USA},
author = {Johnson, Jonathan M and Wirthlin, Michael},
booktitle = {Proceedings of the 18th Annual ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
doi = {10.1145/1723112.1723154},
file = {:C$\backslash$:/Users/akeller9/library/mendeley/Johnson, Wirthlin - 2010 - Voter Insertion Algorithms for {\{}FPGA{\}} Designs Using Triple Modular Redundancy.cfm:cfm},
isbn = {978-1-60558-911-4},
keywords = {algorithm,fpga,reliability,scc,synchronization,tmr,voter insertion},
pages = {249--258},
publisher = {ACM},
series = {FPGA '10},
title = {{Voter Insertion Algorithms for {\{}FPGA{\}} Designs Using Triple Modular Redundancy}},
opturl = {http://doi.acm.org/10.1145/1723112.1723154},
year = {2010}
}

@INPROCEEDINGS{johnson_dwc,
  author={J. {Johnson} and W. {Howes} and M. {Wirthlin} and D. L. {McMurtrey} and M. {Caffrey} and P. {Graham} and K. {Morgan}},
  booktitle={2008 IEEE Aerospace Conference}, 
  title={Using Duplication with Compare for On-line Error Detection in FPGA-based Designs}, 
  year={2008},
  volume={},
  number={},
  pages={1-11},
  abstract={It is well known that SRAM-based FPGAs are susceptible to single-event upsets (SEUs) in radiation environments. A variety of mitigation strategies have been demonstrated to provide appropriate mitigation and correction of SEUs in these environments. While full mitigation of SEUs is appropriate for some situations, some systems may tolerate SEUs as long as these upsets are detected quickly and correctly. These systems require effective error detection techniques rather than costly error correction methods. This work leverages a well-known error detection technique for FPGAs called duplication with compare (DWC). This technique has been shown to be very effective at quickly and accurately detecting SEUs using fault injection and radiation testing.},
  keywords={error detection;field programmable gate arrays;SRAM chips;online error detection;SRAM-based FPGA;single-event upsets;mitigation strategies;error correction methods;duplication with compare;fault injection;radiation testing;Field programmable gate arrays;Single event transient;Fault detection;Circuit faults;Error correction;Electrical fault detection;Radiation detectors;Testing;Vents;Costs},
  doi={10.1109/AERO.2008.4526470},
  ISSN={1095-323X},
  month={March},}

@webpage{BYUediftools,
author={{Brigham Young University}},
title={{BYU EDIF Tools}},
year={2020},
url={https://sourceforge.net/projects/byuediftools/}
}

@webpage{vivado,
author={{Xilinx, Inc.}},
title={{Vivado Design Suite}},
year={2020},
url={https://www.xilinx.com/products/design-tools/vivado.html}
}

@webpage{verific,
author={{Verific Design Automation, Inc.}},
title={{Verific Design Automation}},
year={2020},
url={https://www.verific.com/}
}

@MISC{XilinxTCL,
optauthor={Xilinx, Inc.},
title={Vivado Design Suite Tcl Command Reference Guide},
note={https://www.xilinx.com/support/documentation/sw\_manuals/xilinx2019\_2/ug835-vivado-tcl-commands.pdf}
}

@MISC{livehd,
title={{LiveHD}: Live Hardware Development},
note={https://github.com/masc-ucsc/livehd}
}

@INPROCEEDINGS{tincr,
  author={B. {White} and B. {Nelson}},
  booktitle={2014 International Conference on ReConFigurable Computing and FPGAs (ReConFig14)}, 
  title={Tincr — A custom CAD tool framework for Vivado}, 
  year={2014},
  volume={},
  number={},
  pages={1-6},
  abstract={In recent years, frameworks such as RapidSmith and Tore have been developed for the creation of custom CAD tools able to target actual Xilinx FPGA devices. These have been based on the Xilinx Design Language (XDL), which provides textual representations of both mapped user designs as well as detailed physical FPGA device descriptions. Vivado, Xilinx's new design suite, discontinues XDL and instead provides direct access to its data structures through a Tel interface and through EDIF and constraint files. This paper formally introduces Tincr, a library of high-level Tel routines that support the creation of custom circuit manipulation tools. A case study on the use of Tincr for the creation of a simple placement tool is given. Additionally, this paper describes Tincr's facilities for importing and exporting XDL- and XDLRC-like information to and from Vivado to allow the continued use of existing external CAD tool frameworks such as RapidSmith and Tore with Vivado.},
  keywords={CAD;data structures;electronic engineering computing;field programmable gate arrays;custom CAD tool framework;Vivado;Tincr;Xilinx FPGA devices;Xilinx design language;XDL;textual representations;data structures;Tel interface;EDIF;constraint files;Routing;Field programmable gate arrays;Design automation;Wires;Pins;Libraries;Integrated circuit interconnections},
  doi={10.1109/ReConFig.2014.7032560},
  ISSN={2325-6532},
  month={Dec},}

@Standard{JEDEC,
	title        = {Measurement and reporting of alpha particle and terrestrial cosmic ray-induced soft errors in 
	semiconductor devices},
	year         = {2006},
	organization = {JEDEC Solid State Technology Association},
	url          = {https://www.jedec.org/sites/default/files/docs/JESD89A.pdf},
	file         = {:jesd89a2006measurement - Measurement and reporting of alpha particle and terrestrial cosmic 
	ray-induced soft errors in semiconductor devices.pdf:PDF},
	number       = {89A},
}

@INPROCEEDINGS{rapid_wright,
  author={C. {Lavin} and A. {Kaviani}},
  booktitle={2018 IEEE 26th Annual International Symposium on Field-Programmable Custom Computing Machines (FCCM)}, 
  title={RapidWright: Enabling Custom Crafted Implementations for FPGAs}, 
  year={2018},
  volume={},
  number={},
  pages={133-140},
  abstract={FPGA application size is rapidly growing by reuse and replication. Achieved quality of results (QoR) of these large designs is often much lower than what could be realized with localized circuits at a modular level. One underlying reason for QoR loss is that back-end implementation tools compile the designs as one large circuit entry. Is there a way to bring innovation to the implementation stage of FPGA compilation that can improve QoR? This work proposes a pre-implemented methodology for FPGAs to achieve higher performance or productivity and introduces RapidWright, an open-source platform to enable this new approach. We aim to enhance either QoR or productivity through the reuse of modular implementations and present examples that improve QoR up to 50% or accelerate compilation time and debug by more than an order of magnitude. Finally, we demonstrate how RapidWright enables custom crafted implementations with near spec performance.},
  keywords={field programmable gate arrays;productivity;program compilers;program debugging;public domain software;pre-implemented methodology;RapidWright;open-source platform;modular implementations;debug;FPGA application size;replication;localized circuits;modular level;QoR loss;circuit entry;FPGA compilation;custom crafted implementations;productivity;quality of results;back-end implementation tools;Tools;Field programmable gate arrays;Routing;Performance evaluation;Productivity;Load modeling;Micromechanical devices;FPGA;Xilinx;Pre-implemented;QoR;Debug;Clocking;Overlays;Shells},
  doi={10.1109/FCCM.2018.00030},
  ISSN={2576-2621},
  month={April},}

@misc{tmrimage,
title={{Graphical Representation of TMR}},
note={Mewtow / CC BY-SA (https://creativecommons.org/licenses/by-sa/4.0)},
url={https://commons.wikimedia.org/wiki/File:Triple_Modular_Redundancy_et_sa_variante_am%C3%A9lior%C3%A9e.png}
}

@INPROCEEDINGS{build_hierarchy,
  author={P. {Daglio} and D. {Iezzi} and D. {Rimondi} and C. {Roma} and S. {Santapa}},
  booktitle={Proceedings Design, Automation and Test in Europe Conference and Exhibition}, 
  title={Building the hierarchy from a flat netlist for a fast and accurate post-layout simulation with parasitic components}, 
  year={2004},
  volume={3},
  number={},
  pages={336-337 Vol.3},
  abstract={Main concerns related to post-layout simulation, today, are about the format of the netlist coming out from the parasitic extractor. In fact, such a netlist is usually flat so that readability, whether compared to the pre-layout hierarchical one, is very poor due to device and net names which often change and to the difficulty to compare pre-layout and post-layout output signals. Furthermore, simulating such large flat netlists is frequently time consuming because it is not possible to exploit algorithms like hierarchical array reduction (HAR) and isomorphic matching (IM), strength points of state-of-the-art full chip simulators. In this paper, we present a new approach that, starting from a flat netlist with parasitic components and a pre-layout hierarchical one, allows to create a fully hierarchical post-layout netlist containing device parameters and parasitic components directly extracted from the layout. In this way, a fast and accurate post-layout simulation is made possible by the use of look-up table simulators, taking advantages from the HAR and IM algorithms as mentioned before. This methodology has been integrated in a complete design flow to guarantee first silicon success, cut down time-to-design, improve time-to-market and streamline design quality.},
  keywords={table lookup;SPICE;circuit simulation;flat netlist;post layout simulation;parasitic extractor;time consuming;hierarchical array reduction;isomorphic matching;state of the art full chip simulators;lookup table simulators;design flow;SPICE;simulation program with integrated circuit emphasis;postlayout output signals;prelayout output signals;hierarchical postlayout netlist;Voltage;Silicon;Circuit simulation;Charge pumps;Current measurement;Table lookup;Charge measurement;Buildings;Design automation;Automatic testing},
  doi={10.1109/DATE.2004.1269268},
  ISSN={1530-1591},
  month={Feb},}

@ARTICLE{tmr_sync,
  author={Y. {Li} and B. {Nelson} and M. {Wirthlin}},
  journal={IEEE Transactions on Nuclear Science}, 
  title={Synchronization Techniques for Crossing Multiple Clock Domains in FPGA-Based TMR Circuits}, 
  year={2010},
  volume={57},
  number={6},
  pages={3506-3514},
  abstract={Triple modular redundancy (TMR) is a widely used mitigation technique to protect FPGA circuits against single event upsets (SEUs). TMR, however, does not adequately protect signals that cross asynchronous clock domains. Signals which cross clock domains in TMR circuits may suffer from the combined effects of two failure modes: asynchronous sampling effects and SEUs. This paper analyzes and quantifies these problems. In addition, various solutions are proposed for designing safe synchronizers with TMR. Finally, the improvements in reliability provided by the proposed synchronizers are demonstrated by both mathematical modeling and fault injection testing on an FPGA circuit. It is shown that the proposed mitigated synchronizer designs provide between 6 and 10 orders of magnitude improvement in reliability compared to unmitigated designs.},
  keywords={asynchronous circuits;field programmable gate arrays;logic testing;radiation hardening (electronics);redundancy;reliability;synchronisation;synchronization techniques;multiple clock domains;FPGA-based TMR circuits;triple modular redundancy;mitigation technique;single event upsets;SEU;asynchronous sampling effects;failure modes;fault injection testing;field programmable gate arrays;Field programmable gate arrays;Reliability;Single event upset;Field programmable gate arrays;reliability;single event upset;synchronizer;triple modular redundancy},
  doi={10.1109/TNS.2010.2086075},
  ISSN={1558-1578},
  month={Dec},}
