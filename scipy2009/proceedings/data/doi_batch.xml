<doi_batch xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="5.3.1" xmlns="http://www.crossref.org/schema/5.3.1" xmlns:jats="http://www.ncbi.nlm.nih.gov/JATS1" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fr="http://www.crossref.org/fundref.xsd" xmlns:ai="http://www.crossref.org/AccessIndicators.xsd" xsi:schemaLocation="http://www.crossref.org/schema/5.3.1 http://www.crossref.org/schemas/crossref5.3.1.xsd"><head><doi_batch_id>47bca0d1-cfc7-487c-8e77-ec6f0b19ffc1</doi_batch_id><timestamp>1724829126438</timestamp><depositor><depositor_name>Curvenote</depositor_name><email_address>doi@curvenote.com</email_address></depositor><registrant>Crossref</registrant></head><body><conference><contributors><person_name sequence="first" contributor_role="editor"><given_name>Gael</given_name><surname>Varoquaux</surname><affiliations><institution><institution_name>INRIA, Saclay France</institution_name></institution></affiliations><alt-name><string-name>Gael Varoquaux</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="editor"><given_name>Stéfan</given_name><surname>Walt</surname><affiliations><institution><institution_name>University of Stellenbosch, Stellenbosch South Africa</institution_name></institution></affiliations><alt-name><string-name>Stéfan van der Walt</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="editor"><given_name>Jarrod</given_name><surname>Millman</surname><affiliations><institution><institution_name>UC Berkeley, Berkeley, CA USA</institution_name></institution></affiliations><alt-name><string-name>Jarrod Millman</string-name></alt-name></person_name></contributors><event_metadata><conference_name>Python in Science Conference</conference_name><conference_acronym>SciPy</conference_acronym><conference_number>8th</conference_number><conference_location>Pasadena, California</conference_location><conference_date>August 18 - August 23, 2009</conference_date></event_metadata><proceedings_series_metadata><series_metadata><titles><title>Proceedings of the Python in Science Conference</title><original_language_title>Proceedings of the Python in Science Conference</original_language_title></titles><issn>2575-9752</issn><doi_data><doi>10.25080/issn.2575-9752</doi><resource>https://doi.curvenote.com/10.25080/issn.2575-9752</resource></doi_data></series_metadata><proceedings_title>Proceedings of the 8th Python in Science Conference</proceedings_title><proceedings_subject>Scientific Computing with Python</proceedings_subject><publisher><publisher_name>SciPy</publisher_name></publisher><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><noisbn reason="simple_series"></noisbn><doi_data><doi>10.25080/RJFG8479</doi><resource>https://doi.curvenote.com/10.25080/RJFG8479</resource></doi_data></proceedings_series_metadata><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Gael</given_name><surname>Varoquaux</surname><affiliations><institution><institution_name>INRIA, Saclay France</institution_name></institution></affiliations><alt-name><string-name>Gael Varoquaux</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Stéfan</given_name><surname>Walt</surname><affiliations><institution><institution_name>University of Stellenbosch, Stellenbosch South Africa</institution_name></institution></affiliations><alt-name><string-name>Stéfan van der Walt</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Jarrod</given_name><surname>Millman</surname><affiliations><institution><institution_name>UC Berkeley, Berkeley, CA USA</institution_name></institution></affiliations><alt-name><string-name>Jarrod Millman</string-name></alt-name></person_name></contributors><titles><title>Editorial</title></titles><jats:abstract><jats:p>SciPy 2009 marks our eighth annual Python in Science conference and the second edition of the conference proceedings. The conference and these proceedings highlight the ongoing focus of the community on providing practical software tools, created to address real scientific problems.</jats:p></jats:abstract><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><pages><first_page>2</first_page><last_page>3</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/GKRF4753</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/GKRF4753</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Stefan</given_name><surname>Behnel</surname><affiliations><institution><institution_name>Senacor Technologies AG, Germany</institution_name></institution></affiliations><alt-name><string-name>Stefan Behnel</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Robert W.</given_name><surname>Bradshaw</surname><affiliations><institution><institution_name>University of Washington, USA</institution_name></institution></affiliations><alt-name><string-name>Robert W. Bradshaw</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Dag Sverre</given_name><surname>Seljebotn</surname><affiliations><institution><institution_name>University of Oslo, Norway</institution_name></institution></affiliations><alt-name><string-name>Dag Sverre Seljebotn</string-name></alt-name></person_name></contributors><titles><title>Cython tutorial</title></titles><jats:abstract><jats:p>Cython is a programming language based on Python with extra syntax to provide static type declarations. This takes advantage of the benefits of Python while allowing one to achieve the speed of C. In this paper we describe the Cython language and show how it can be used both to write optimized code and to interface with external C libraries.</jats:p></jats:abstract><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><pages><first_page>4</first_page><last_page>14</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/MJMV8092</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/MJMV8092</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Dag Sverre</given_name><surname>Seljebotn</surname><affiliations><institution><institution_name>University of Oslo, Norway</institution_name></institution></affiliations><alt-name><string-name>Dag Sverre Seljebotn</string-name></alt-name></person_name></contributors><titles><title>Fast numerical computations with Cython</title></titles><jats:abstract><jats:p>Cython has recently gained popularity as a tool for conveniently performing numerical computations in the Python environment, as well as mixing efficient calls to natively compiled libraries with Python code. We discuss Cython’s features for fast NumPy array access in detail through examples and benchmarks. Using Cython to call natively compiled scientific libraries as well as using Cython in parallel computations is also given consideration. We conclude with a note on possible directions for future Cython development.</jats:p></jats:abstract><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><pages><first_page>15</first_page><last_page>22</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/GTCA8577</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/GTCA8577</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Andrew</given_name><surname>Friedley</surname><affiliations><institution><institution_name>Indiana University, USA</institution_name></institution></affiliations><alt-name><string-name>Andrew Friedley</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Christopher</given_name><surname>Mueller</surname><affiliations><institution><institution_name>Indiana University, USA</institution_name></institution></affiliations><alt-name><string-name>Christopher Mueller</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Andrew</given_name><surname>Lumsdaine</surname><affiliations><institution><institution_name>Indiana University, USA</institution_name></institution></affiliations><alt-name><string-name>Andrew Lumsdaine</string-name></alt-name></person_name></contributors><titles><title>High-Performance Code Generation Using CorePy</title></titles><jats:abstract><jats:p>Although Python is well-known for its ease of use, it lacks the performance that is often necessary for numerical applications. As a result, libraries like NumPy and SciPy implement their core operations in C for better performance. CorePy represents an alternative approach in which an assembly language is embedded in Python, allowing direct access to the low-level processor architecture. We present the CoreFunc framework, which utilizes CorePy to provide an environment for applying element-wise arithmetic operations (such as addition) to arrays and achieving high performance while doing so. To evaluate the framework, we develop and experiment with several ufunc operations of varying complexity. Our results show that CoreFunc is an excellent tool for accelerating NumPy-based applications.</jats:p></jats:abstract><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><pages><first_page>23</first_page><last_page>28</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/KJFV4144</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/KJFV4144</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Damian</given_name><surname>Eads</surname><affiliations><institution><institution_name>University of California, 1156 High Street, Santa Cruz USA</institution_name></institution></affiliations><alt-name><string-name>Damian Eads</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Edward</given_name><surname>Rosten</surname><affiliations><institution><institution_name>University of Cambridge, Trumpington Street, Cambridge UK</institution_name></institution></affiliations><alt-name><string-name>Edward Rosten</string-name></alt-name></person_name></contributors><titles><title>Convert-XY: type-safe interchange of C++ and Python containers for NumPy extensions</title></titles><jats:abstract><jats:p>We present Convert-XY: a new, header-only template library for converting containers between C++ and Python with a simple, succinct syntax. At compile-time, template-based recursive pattern matching is performed on the static structure of the C++ type to build dynamic type checkers and conversion functions.</jats:p></jats:abstract><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><pages><first_page>29</first_page><last_page>35</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/YMNH5606</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/YMNH5606</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>P. A.</given_name><surname>Kienzle</surname><affiliations><institution><institution_name>NIST Center for Neutron Research, National Institute of Standards and Technology, Gaithersburg, Maryland 20899 USA</institution_name></institution></affiliations><alt-name><string-name>P. A. Kienzle</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>N.</given_name><surname>Patel</surname><affiliations><institution><institution_name>Department of Materials Science and Engineering, University of Maryland, College Park, Maryland 20742 USA</institution_name></institution></affiliations><alt-name><string-name>N. Patel</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>M.</given_name><surname>McKerns</surname><affiliations><institution><institution_name>Materials Science, California Institute of Technology, Pasadena, California 91125 USA</institution_name></institution></affiliations><alt-name><string-name>M. McKerns</string-name></alt-name></person_name></contributors><titles><title>Parallel Kernels: An Architecture for Distributed Parallel Computing</title></titles><jats:abstract><jats:p>Global optimization problems can involve huge computational resources. The need to prepare, schedule and monitor hundreds of runs and interactively explore and analyze data is a challenging problem. Managing such a complex computational environment requires a sophisticated software framework which can distribute the computation on remote nodes hiding the complexity of the communication in such a way that scientist can concentrate on the details of computation. We present PARK, the computational job management framework being developed as a part of DANSE project, which will offer a simple, efficient and consistent user experience in a variety of heterogeneous environments from multi-core workstations to global Grid systems. PARK will provide a single environment for developing and testing algorithms locally and executing them on remote clusters, while providing user full access to their job history including their configuration and input/output. This paper will introduce the PARK philosophy, the PARK architecture and current and future strategy in the context of global optimization algorithms.</jats:p></jats:abstract><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><pages><first_page>36</first_page><last_page>40</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/FCFP7555</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/FCFP7555</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Marcin</given_name><surname>Cieślik</surname><affiliations><institution><institution_name>University of Virginia, U.S.</institution_name></institution></affiliations><alt-name><string-name>Marcin Cieślik</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Cameron</given_name><surname>Mura</surname><affiliations><institution><institution_name>University of Virginia, U.S.</institution_name></institution></affiliations><alt-name><string-name>Cameron Mura</string-name></alt-name></person_name></contributors><titles><title>PaPy: Parallel and distributed data-processing pipelines in Python</title></titles><jats:abstract><jats:p>PaPy, which stands for parallel pipelines in Python, is a highly flexible framework that enables the construction of robust, scalable workflows for either generating or processing voluminous datasets. A workflow is created from user-written Python functions (nodes) connected by ‘pipes’ (edges) into a directed acyclic graph. These functions are arbitrarily definable, and can make use of any Python modules or external binaries. Given a user-defined topology and collection of input data, functions are composed into nested higher-order maps, which are transparently and robustly evaluated in parallel on a single computer or on remote hosts. Local and remote computational resources can be flexibly pooled and assigned to functional nodes, thereby allowing facile load-balancing and pipeline optimization to maximimize computational throughput. Input items are processed by nodes in parallel, and traverse the graph in batches of adjustable size - a trade-off between lazy-evaluation, parallelism, and memory consumption. The processing of a single item can be parallelized in a scatter/gather scheme. The simplicity and flexibility of distributed workflows using PaPy bridges the gap between desktop -> grid, enabling this new computing paradigm to be leveraged in the processing of large scientific datasets.</jats:p></jats:abstract><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><pages><first_page>41</first_page><last_page>47</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/YMFH4086</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/YMFH4086</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Olaf</given_name><surname>Lenz</surname><affiliations><institution><institution_name>Max Planck Institute for Polymer Research, Postfach 3148, D-55021 Mainz Germany</institution_name></institution></affiliations><alt-name><string-name>Olaf Lenz</string-name></alt-name></person_name></contributors><titles><title>PMI - Parallel Method Invocation</title></titles><jats:abstract><jats:p>The Python module <jats:monospace>pmi</jats:monospace> (Parallel Method Invocation) is
presented. It allows users to write simple, non-parallel Python scripts that use functions and classes that are executed in parallel.
The module is well suited to be employed by other modules and packages that want to provide functions that are executed in parallel. The user of such a module does not have to write a parallel script, but can still profit from parallel execution.</jats:p></jats:abstract><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><pages><first_page>48</first_page><last_page>50</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/XNFJ4510</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/XNFJ4510</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Brian L.</given_name><surname>Refsdal</surname><affiliations><institution><institution_name>Harvard-Smithsonian Center for Astrophysics, USA</institution_name></institution></affiliations><alt-name><string-name>Brian L. Refsdal</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Stephen M.</given_name><surname>Doe</surname><affiliations><institution><institution_name>Harvard-Smithsonian Center for Astrophysics, USA</institution_name></institution></affiliations><alt-name><string-name>Stephen M. Doe</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Dan T.</given_name><surname>Nguyen</surname><affiliations><institution><institution_name>Harvard-Smithsonian Center for Astrophysics, USA</institution_name></institution></affiliations><alt-name><string-name>Dan T. Nguyen</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Aneta L.</given_name><surname>Siemiginowska</surname><affiliations><institution><institution_name>Harvard-Smithsonian Center for Astrophysics, USA</institution_name></institution></affiliations><alt-name><string-name>Aneta L. Siemiginowska</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Nina R.</given_name><surname>Bonaventura</surname><affiliations><institution><institution_name>Harvard-Smithsonian Center for Astrophysics, USA</institution_name></institution></affiliations><alt-name><string-name>Nina R. Bonaventura</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Douglas</given_name><surname>Burke</surname><affiliations><institution><institution_name>Harvard-Smithsonian Center for Astrophysics, USA</institution_name></institution></affiliations><alt-name><string-name>Douglas Burke</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Ian N.</given_name><surname>Evans</surname><affiliations><institution><institution_name>Harvard-Smithsonian Center for Astrophysics, USA</institution_name></institution></affiliations><alt-name><string-name>Ian N. Evans</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Janet D.</given_name><surname>Evans</surname><affiliations><institution><institution_name>Harvard-Smithsonian Center for Astrophysics, USA</institution_name></institution></affiliations><alt-name><string-name>Janet D. Evans</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Antonella</given_name><surname>Fruscione</surname><affiliations><institution><institution_name>Harvard-Smithsonian Center for Astrophysics, USA</institution_name></institution></affiliations><alt-name><string-name>Antonella Fruscione</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Elizabeth C.</given_name><surname>Galle</surname><affiliations><institution><institution_name>Harvard-Smithsonian Center for Astrophysics, USA</institution_name></institution></affiliations><alt-name><string-name>Elizabeth C. Galle</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>John C.</given_name><surname>Houck</surname><affiliations><institution><institution_name>MIT Kavli Institute, USA</institution_name></institution></affiliations><alt-name><string-name>John C. Houck</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Margarita</given_name><surname>Karovska</surname><affiliations><institution><institution_name>Harvard-Smithsonian Center for Astrophysics, USA</institution_name></institution></affiliations><alt-name><string-name>Margarita Karovska</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Nicholas P.</given_name><surname>Lee</surname><affiliations><institution><institution_name>Harvard-Smithsonian Center for Astrophysics, USA</institution_name></institution></affiliations><alt-name><string-name>Nicholas P. Lee</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Michael A.</given_name><surname>Nowak</surname><affiliations><institution><institution_name>MIT Kavli Institute, USA</institution_name></institution></affiliations><alt-name><string-name>Michael A. Nowak</string-name></alt-name></person_name></contributors><titles><title>Sherpa: 1D/2D modeling and fitting in Python</title></titles><jats:abstract><jats:p>Sherpa is a modern, general purpose fitting and modeling application available in Python. It contains a set of robust optimization methods that are critical to the forward fitting technique used in parametric data modeling. The Python implementation provides a powerful software package that is flexible and extensible with direct access to all internal data objects. Sherpa affords a highly proficient scientific working environment required by the challenges of modern data analysis. It is implemented as a set of Python modules with computationally-intensive portions written in C++/FORTRAN as extension modules using the Python C-API. It also provides a high level user interface with command-like functions in addition to the classes and functions at the API level. Sherpa is being developed by the Chandra X-ray Center (CXC) and is packaged with the Chandra data analysis software package (CIAO). Sherpa can also be built as a standalone application; it can be extended by the user, or embedded in other applications. It allows for analysis specific to astronomy, but also supports generic modeling and fitting tasks. The ‘astro’ module includes additional astronomy model functions, FITS image support, instrument models, and utilities. Sherpa’s model library includes some commonly used 1D and 2D functions and most of the X-ray spectral models found in the High Energy Astrophysics Science Archive Research Center (HEASARC) XSPEC application. Sherpa also supports user-defined models written in Python, C++, and FORTRAN, allowing users to extend Sherpa with models not included in our model library. Sherpa has a set of optimization methods including LMDIF, implementations of Differential Evolution (Monte Carlo) and Nelder-Mead simplex. These functions minimize differences between data points and model values (as measured by a fit statistic such as the chi-squared, maximum likelihood, or a user-defined statistic). The generic I/O module includes back-end interfaces to read ASCII files using NumPy and astronomy image files (FITS) using PyFITS or CIAO Crates (CXC Data Model library in C++). Sherpa is general enough to fit and model data from a variety of astronomical observatories (e.g., Chandra, ROSAT, Hubble) and over many wavebands (e.g., X-ray, optical, radio). In fact, Sherpa can fit and model any data set that can be represented as collections of 1D or 2D arrays (and can be extended for data of higher dimensionality). Data sets can also be simulated with noise using any model. The visualization module also allows for multiple back-ends. An interface to Matplotlib and CIAO ChIPS (CXC plotting package layered on VTK in C++) are provided for line and histogram plotting. 2D visualization is supported by the Smithsonian Astrophysical Observatory (SAO) imager, DS9. The Sherpa command line uses a configured version of IPython to provide a high level shell with IPython ‘magic’ and readline support.</jats:p></jats:abstract><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><pages><first_page>51</first_page><last_page>57</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/DVMY8107</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/DVMY8107</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Pavel</given_name><surname>Solin</surname><affiliations><institution><institution_name>University of Nevada, Reno, USA</institution_name></institution></affiliations><alt-name><string-name>Pavel Solin</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Ondrej</given_name><surname>Certik</surname><affiliations><institution><institution_name>University of Nevada, Reno, USA</institution_name></institution></affiliations><alt-name><string-name>Ondrej Certik</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Sameer</given_name><surname>Regmi</surname><affiliations><institution><institution_name>University of Nevada, Reno, USA</institution_name></institution></affiliations><alt-name><string-name>Sameer Regmi</string-name></alt-name></person_name></contributors><titles><title>The FEMhub Project and Classroom Teaching of Numerical Methods</title></titles><jats:abstract><jats:p>We introduce briefly the open source project FEMhub and focus on describing how it can be used for live demonstrations of elementary numerical methods in daily classroom teaching.</jats:p></jats:abstract><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><pages><first_page>58</first_page><last_page>61</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/DJHK4763</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/DJHK4763</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Christopher</given_name><surname>Lee</surname><affiliations><institution><institution_name>Department of Chemistry &#x26;amp</institution_name></institution><institution><institution_name>Biochemistry, UCLA, 611 Charles Young Dr. East, Los Angeles, CA 90095 USA</institution_name></institution></affiliations><alt-name><string-name>Christopher Lee</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Alexander</given_name><surname>Alekseyenko</surname><affiliations><institution><institution_name>Center for Health Informatics and Bioinformatics, Department of Medicine, New York University School of Medicine, New York, NY 10016 USA</institution_name></institution></affiliations><alt-name><string-name>Alexander Alekseyenko</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>C. Titus</given_name><surname>Brown</surname><affiliations><institution><institution_name>Dept. of Computer Science and Engineering, Dept. of Microbiology and Molecular Genetics, Michigan State University, East Lansing, Michigan 48824 USA</institution_name></institution></affiliations><alt-name><string-name>C. Titus Brown</string-name></alt-name></person_name></contributors><titles><title>Exploring the future of bioinformatics data sharing and mining with Pygr and Worldbase</title></titles><jats:abstract><jats:p>Worldbase is a virtual namespace for scientific data sharing that can be accessed via <jats:monospace>from pygr import worldbase</jats:monospace>. Worldbase enables users to access, save and share complex datasets as easily as simply giving a specific name for a commonly-used dataset (e.g. Bio.Seq.Genome.HUMAN.hg17 for draft 17 of the human genome). Worldbase transparently takes care of all issues of how to access the dataset, what code must be imported to use it, what dependencies on other datasets it may have, and how to make use of its relations with other datasets as specified by its schema. Worldbase works with a wide variety of “back-end” storage, including data stored on local file systems, relational databases such as MySQL, remote services via XMLRPC, and “downloadable” resources that can be obtained from the network but automatically installed locally by Worldbase.</jats:p></jats:abstract><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><pages><first_page>62</first_page><last_page>67</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/PGHE8514</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/PGHE8514</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Ariel</given_name><surname>Rokem</surname><affiliations><institution><institution_name>University of California, Berkeley, Berkeley, CA USA</institution_name></institution></affiliations><alt-name><string-name>Ariel Rokem</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Michael</given_name><surname>Trumpis</surname><affiliations><institution><institution_name>University of California, Berkeley, Berkeley, CA USA</institution_name></institution></affiliations><alt-name><string-name>Michael Trumpis</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Fernando</given_name><surname>Pérez</surname><affiliations><institution><institution_name>University of California, Berkeley, Berkeley, CA USA</institution_name></institution></affiliations><alt-name><string-name>Fernando Pérez</string-name></alt-name></person_name></contributors><titles><title>Nitime: time-series analysis for neuroimaging data</title></titles><jats:abstract><jats:p>Nitime is a library for the analysis of time-series developed as part of the Nipy project, an effort to build open-source libraries for neuroimaging research. While nitime is developed primarily with neuroimaging data in mind (espespecially functional Magnetic Resonance Imaging data), its design is generic enough that it should be useful to other fields with experimental time-series. The package starts from a purely functional set of algorithms for time-series analysis, including spectral transforms, event-related analysis and coherency. An object-oriented layer is separated into lightweight data container objects for the representation of time-series data and high-level analyzer objects that couple data storage and algorithms. Each analyzer is designed to deal with a particular family of analysis methods and exposes a high-level object oriented interface to the underlying numerical algorithms. We briefly describe functional neuroimaging and some of the unique considerations applicable to time-series analysis of data acquired using these techniques, and provide examples of using nitime to analyze both synthetic data and real-world neuroimaging time-series.</jats:p></jats:abstract><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><pages><first_page>68</first_page><last_page>75</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/WXDN0820</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/WXDN0820</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Brian</given_name><surname>D'Urso</surname><affiliations><institution><institution_name>University of Pittsburgh, Department of Physics and Astronomy, 3941 O'Hara St., Pittsburgh, PA 15260 US</institution_name></institution></affiliations><alt-name><string-name>Brian D'Urso</string-name></alt-name></person_name></contributors><titles><title>Multiprocess System for Virtual Instruments in Python</title></titles><jats:abstract><jats:p>Programs written for controlling laboratory equipment and interfacing numerical calculations share the need for a simple graphical user interface (GUI) frontend and a multithreaded or multiprocess structure to allow control and data display to remain usable while other actions are performed. We introduce Pythics, a system for running “virtual instruments”, which are simple programs typically used for data acquisition and analysis. Pythics provides a simple means of creating a virtual instrument and customizing its appearance and functionality without the need for toolkit specific knowledge. It utilizes a robust, multiprocess structure which separates the GUI and the back end of each instrument to allow for effective usage of system resources without sacrificing functionality.</jats:p></jats:abstract><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><pages><first_page>76</first_page><last_page>80</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/NMCP3665</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/NMCP3665</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Piotr A.</given_name><surname>Zolnierczuk</surname><affiliations><institution><institution_name>Oak Ridge National Lab, USA</institution_name></institution></affiliations><alt-name><string-name>Piotr A. Zolnierczuk</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>Richard E.</given_name><surname>Riedel</surname><affiliations><institution><institution_name>Oak Ridge National Lab, USA</institution_name></institution></affiliations><alt-name><string-name>Richard E. Riedel</string-name></alt-name></person_name></contributors><titles><title>Neutron-scattering data acquisition and experiment automation with Python</title></titles><jats:abstract><jats:p>PyDas is a set of Python modules that are used to integrate various components of the Data Acquisition System at Spallation Neutron Source (SNS). PyDas enables customized automation of neutron scattering experiments in a rapid and flexible manner. It provides wxPython-based GUIs for routine experiments as well as IPython command line scripting environment. Matplotlib and NumPy are used for data presentation and simple analysis. PyDas is currently used on a number of SNS instruments and plans exist to deploy it on new ones as they come on-line.</jats:p></jats:abstract><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><pages><first_page>81</first_page><last_page>83</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/MNPK7710</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/MNPK7710</resource></doi_data></conference_paper><conference_paper><contributors><person_name sequence="first" contributor_role="author"><given_name>Joseph</given_name><surname>Harrington</surname><affiliations><institution><institution_name>U. Central Florida, Orlando, Florida USA</institution_name></institution></affiliations><alt-name><string-name>Joseph Harrington</string-name></alt-name></person_name><person_name sequence="additional" contributor_role="author"><given_name>David</given_name><surname>Goldsmith</surname><affiliations><institution><institution_name>U. Central Florida, Orlando, Florida USA</institution_name></institution></affiliations><alt-name><string-name>David Goldsmith</string-name></alt-name></person_name></contributors><titles><title>Progress Report: NumPy and SciPy Documentation in 2009</title></titles><jats:abstract><jats:p>In the Spring of 2008, the SciPy Documentation Project began to write documentation for NumPy and SciPy. Starting from 8658 words, the NumPy reference pages now have over 110,000 words, producing an 884-page PDF document. These pages need to undergo both presentation and technical review. Our plans include SciPy documentation as well as several user guides, tutorials, and pamphlets. A critical need at this point is a stable funding stream to support the Documentation Coordinators who have been instrumental to the success of this project.</jats:p></jats:abstract><publication_date media_type="online"><month>08</month><day>18</day><year>2009</year></publication_date><pages><first_page>84</first_page><last_page>87</last_page></pages><ai:program name="AccessIndicators"><ai:free_to_read></ai:free_to_read><ai:license_ref applies_to="vor">https://creativecommons.org/licenses/by/3.0/</ai:license_ref></ai:program><doi_data><doi>10.25080/XNKE0926</doi><resource content_version="vor">https://doi.curvenote.com/10.25080/XNKE0926</resource></doi_data></conference_paper></conference></body></doi_batch>